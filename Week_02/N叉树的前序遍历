/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    List<Integer> res = new ArrayList<>();
    public List<Integer> preorder(Node root) {
        //1.递归
        // if (root == null) return res;
        // res.add(root.val);
        // for (Node node : root.children) {
        //     preorder(node);
        // }
        // return res;
        //2.迭代
        LinkedList<Node> stack = new LinkedList<>();
        LinkedList<Integer> output = new LinkedList<>();

        if (root == null) return output;

        stack.add(root);
        while(!stack.isEmpty()) {
            Node node = stack.pollLast();
            output.add(node.val);

            Collections.reverse(node.children);
            for (Node item: node.children){
                stack.add(item);
            }
        }

        return output;
    }
}