/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
    //1.广度优先搜索
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) return res;

        Queue<Node> queue = new LinkedList<>();

        queue.add(root);
        while(!queue.isEmpty()) {
            List<Integer> level = new ArrayList<>();
            int size = queue.size();
            for (int i = 0; i < size; ++i) {
                Node node = queue.poll();
                level.add(node.val);
                queue.addAll(node.children);
            }
            res.add(level);
        }
        return res;

    //2.简化的广度优先搜索
    // List<List<Integer>> res = new ArrayList<>();
    // if (root == null) return res;

    // List<Node> prev = Arrays.asList(root);
    // while(!prev.isEmpty()) {
    //     List<Node> curr = new ArrayList<>();
    //     List<Integer> pval = new ArrayList<>();
    //     for (Node node : prev) {
    //         pval.add(node.val);
    //         curr.addAll(node.children);
    //     }
    //     res.add(pval);
    //     prev = curr;
    // }
    // return res;

    //3.递归
    //     List<List<Integer>> res = new ArrayList<>();
    //     head(root, res, 0);
    //     return res;
    // }
    // private void head(Node root, List<List<Integer>> res, int level) {
    //     if (root == null) return;
    //     if (res.size() <= level) {
    //         res.add(new ArrayList<>());
    //     }
    //     res.get(level).add(root.val);
    //     for (Node node : root.children) {
    //         head(node, res, level + 1);
    //     }
    }
}